// Utilit√°rio para sincroniza√ß√£o de dados
class SyncManager {
  constructor() {
    this.lastSync = localStorage.getItem('hotdog_last_sync') || 0;
    this.syncInterval = null;
  }

  // Iniciar sincroniza√ß√£o autom√°tica
  startAutoSync() {
    // Verificar atualiza√ß√µes a cada 30 segundos
    this.syncInterval = setInterval(() => {
      this.checkForUpdates();
    }, 30000);
  }

  // Parar sincroniza√ß√£o autom√°tica
  stopAutoSync() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
  }

  // Verificar se h√° atualiza√ß√µes no arquivo
  async checkForUpdates() {
    try {
      const timestamp = new Date().getTime();
      const response = await fetch(`/data/products.json?t=${timestamp}`);
      
      if (response.ok) {
        const data = await response.json();
        const fileLastModified = response.headers.get('last-modified');
        
        if (fileLastModified) {
          const fileTime = new Date(fileLastModified).getTime();
          
          if (fileTime > this.lastSync) {
            console.log('üîÑ Atualiza√ß√£o detectada! Sincronizando...');
            this.updateLocalData(data);
            this.lastSync = fileTime;
            localStorage.setItem('hotdog_last_sync', this.lastSync.toString());
            
            // Disparar evento de atualiza√ß√£o
            window.dispatchEvent(new CustomEvent('productsUpdated', { detail: data }));
          }
        }
      }
    } catch (error) {
      console.log('Erro ao verificar atualiza√ß√µes:', error);
    }
  }

  // Atualizar dados locais
  updateLocalData(data) {
    if (data.products) {
      localStorage.setItem('hotdog_products', JSON.stringify(data.products));
    }
    if (data.dailyOffer !== undefined) {
      if (data.dailyOffer) {
        localStorage.setItem('hotdog_daily_offer', JSON.stringify(data.dailyOffer));
      } else {
        localStorage.removeItem('hotdog_daily_offer');
      }
    }
    if (data.pixKey !== undefined) {
      localStorage.setItem('pixKey', data.pixKey || '');
    }
    if (data.pixName !== undefined) {
      localStorage.setItem('pixName', data.pixName || '');
    }
  }

  // For√ßar sincroniza√ß√£o manual
  async forceSync() {
    try {
      const timestamp = new Date().getTime();
      const response = await fetch(`/data/products.json?t=${timestamp}`);
      
      if (response.ok) {
        const data = await response.json();
        this.updateLocalData(data);
        this.lastSync = timestamp;
        localStorage.setItem('hotdog_last_sync', this.lastSync.toString());
        
        console.log('‚úÖ Sincroniza√ß√£o for√ßada conclu√≠da');
        return data;
      }
    } catch (error) {
      console.error('Erro na sincroniza√ß√£o for√ßada:', error);
    }
    return null;
  }

  // Marcar que houve mudan√ßa local
  markLocalChange() {
    const timestamp = new Date().getTime();
    localStorage.setItem('hotdog_last_update', timestamp.toString());
    console.log('üìù Mudan√ßa local marcada para sincroniza√ß√£o');
  }

  // Obter timestamp da √∫ltima mudan√ßa
  getLastUpdate() {
    return localStorage.getItem('hotdog_last_update');
  }
}

// Inst√¢ncia global
const syncManager = new SyncManager();

export default syncManager; 